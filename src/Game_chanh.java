
import com.fasterxml.jackson.databind.ObjectMapper;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ChanhPM
 */
public class Game_chanh extends javax.swing.JFrame {

    public int time_run, point;
    public final int TIME_MAX = 100;
    public Timer time;
    public List<Question> listQues;
    public List<String> listImage;
    public Question cur_ques;
    public String user_ans;

    public Question[] questions;

    public Game_chanh() throws JavaLayerException, IOException {
        time_run = TIME_MAX;
        initComponents();
        ObjectMapper objectMapper = new ObjectMapper();
        InputStream input_data = this.getClass().getResourceAsStream("question.json");
        questions = objectMapper.readValue(input_data, Question[].class);

        changeVisibleAll(false);
        this.setTitle("Game Đố Vui - Version 1.3");
        listImage = new ArrayList();
        for (int i = 0; i < 8; i++) {
            listImage.add("background" + i);
        }

        new Thread() {
            @Override
            public void run() {
                try (InputStream fis = this.getClass().getResourceAsStream("music.mp3")) {

                    new Player(fis).play();
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }.start();

        try {
            setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("babelfish_2.png")));
        } catch (Exception e) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScore = new javax.swing.JLabel();
        jPoint = new javax.swing.JLabel();
        jansC = new javax.swing.JButton();
        jPlay = new javax.swing.JButton();
        jQuestion = new javax.swing.JLabel();
        jansB = new javax.swing.JButton();
        jansD = new javax.swing.JButton();
        jansA = new javax.swing.JButton();
        JExit = new javax.swing.JButton();
        JPlaygame = new javax.swing.JButton();
        jBackground = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jTopPlayer = new javax.swing.JMenu();
        jTop10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jAuthor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 940, 22));

        jScore.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jScore.setText("Score:");
        jPanel1.add(jScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jPoint.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jPoint.setText("0");
        jPanel1.add(jPoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, -1, -1));

        jansC.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jansC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_chanh/cat_true.png"))); // NOI18N
        jansC.setEnabled(false);
        jansC.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jansC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jansCActionPerformed(evt);
            }
        });
        jPanel1.add(jansC, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 410, 85));

        jPlay.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jPlay.setText("PLAY");
        jPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayActionPerformed(evt);
            }
        });
        jPanel1.add(jPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 490, 410, 55));

        jQuestion.setBackground(new java.awt.Color(204, 204, 204));
        jQuestion.setFont(new java.awt.Font("Times New Roman", 1, 32)); // NOI18N
        jPanel1.add(jQuestion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 115, 940, 120));

        jansB.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jansB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_chanh/6666.png"))); // NOI18N
        jansB.setEnabled(false);
        jansB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jansB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jansBActionPerformed(evt);
            }
        });
        jPanel1.add(jansB, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 260, 410, 85));

        jansD.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jansD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_chanh/999.png"))); // NOI18N
        jansD.setEnabled(false);
        jansD.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jansD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jansDActionPerformed(evt);
            }
        });
        jPanel1.add(jansD, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 380, 410, 85));

        jansA.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jansA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_chanh/555.png"))); // NOI18N
        jansA.setEnabled(false);
        jansA.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jansA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jansAActionPerformed(evt);
            }
        });
        jPanel1.add(jansA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 410, 85));

        JExit.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        JExit.setText("EXIT");
        JExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JExitActionPerformed(evt);
            }
        });
        jPanel1.add(JExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 250, 340, 70));

        JPlaygame.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        JPlaygame.setText("PLAY GAME");
        JPlaygame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPlaygameActionPerformed(evt);
            }
        });
        jPanel1.add(JPlaygame, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 150, 340, 70));

        jBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_chanh/Anh_nen.jpg"))); // NOI18N
        jPanel1.add(jBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 560));

        jTopPlayer.setText("Top Player");

        jTop10.setText("Top 10");
        jTop10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTop10ActionPerformed(evt);
            }
        });
        jTopPlayer.add(jTop10);

        jMenuBar1.add(jTopPlayer);

        jMenu2.setText("About");

        jAuthor.setText("Tác giả");
        jAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAuthorActionPerformed(evt);
            }
        });
        jMenu2.add(jAuthor);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void readQues() throws IOException {
        listQues = new ArrayList<>(Arrays.asList(questions));

    }
    private void jansAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jansAActionPerformed
        this.user_ans = jansA.getText().replace("A. ", "");
        if (check_result()) {
            time.stop();
            this.jPlay.setText("Corrected!");
            load();

        } else {
            jQuestion.setText("You lose!");
            this.jPlay.setEnabled(true);
            this.jPlay.setText("Replay");
            this.jansA.setEnabled(false);
            this.jansB.setEnabled(false);
            this.jansC.setEnabled(false);
            this.jansD.setEnabled(false);
            time.stop();
            jProgressBar1.setValue(0);
        }
    }//GEN-LAST:event_jansAActionPerformed

    private void jansCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jansCActionPerformed
        this.user_ans = jansC.getText().replace("C. ", "");
        if (check_result()) {
            time.stop();
            this.jPlay.setText("Corrected!");
            load();

        } else {
            jQuestion.setText("You lose!");
            this.jPlay.setEnabled(true);
            this.jPlay.setText("Replay");
            time.stop();
            jProgressBar1.setValue(0);
            this.jansA.setEnabled(false);
            this.jansB.setEnabled(false);
            this.jansC.setEnabled(false);
            this.jansD.setEnabled(false);
        }
    }//GEN-LAST:event_jansCActionPerformed

    private void jPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayActionPerformed

        try {
            readQues();
        } catch (IOException ex) {
            Logger.getLogger(Game_chanh.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.jPlay.setEnabled(false);// clock the btn
        this.jansA.setEnabled(true);
        this.jansB.setEnabled(true);
        this.jansC.setEnabled(true);
        this.jansD.setEnabled(true);

        point = -1;
        time = new Timer(80, new LoadTime());
        load();


    }//GEN-LAST:event_jPlayActionPerformed

    public static List<String> Shuffle(Question q) {
        List<String> list_answers = new ArrayList<String>();
        list_answers.add(q.getAnsA());
        list_answers.add(q.getAnsB());
        list_answers.add(q.getAnsC());
        list_answers.add(q.getAnsD());

        Random r = new Random();
        int count = list_answers.size();
        while (count > 1) {
            int r_index = r.nextInt(count);
            count--;
            String temp = list_answers.get(count);
            list_answers.set(count, list_answers.get(r_index));
            list_answers.set(r_index, temp);

        }
        return list_answers;
    }

    private void jansDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jansDActionPerformed
        this.user_ans = jansD.getText().replace("D. ", "");
        if (check_result()) {
            time.stop();
            this.jPlay.setText("Corrected!");
            load();

        } else {
            jQuestion.setText("You lose!");
            this.jPlay.setEnabled(true);
            this.jPlay.setText("Replay");
            this.jansA.setEnabled(false);
            this.jansB.setEnabled(false);
            this.jansC.setEnabled(false);
            this.jansD.setEnabled(false);
            time.stop();
            jProgressBar1.setValue(0);
        }
    }//GEN-LAST:event_jansDActionPerformed

    private void jansBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jansBActionPerformed
        this.user_ans = jansB.getText().replace("B. ", "");
        if (check_result()) {
            time.stop();
            this.jPlay.setText("Corrected!");
            load();

        } else {
            jQuestion.setText("You lose!");
            this.jPlay.setEnabled(true);
            this.jPlay.setText("Replay");
            this.jansA.setEnabled(false);
            this.jansB.setEnabled(false);
            this.jansC.setEnabled(false);
            this.jansD.setEnabled(false);
            time.stop();
            jProgressBar1.setValue(0);
        }
    }//GEN-LAST:event_jansBActionPerformed

    private void JPlaygameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPlaygameActionPerformed
        // TODO add your handling code here:
        jPlay.setVisible(false);
        JExit.setVisible(false);
        jPlay.setText("Replay");
        JPlaygame.setVisible(false);
        jPlayActionPerformed(evt);
        jQuestion.setHorizontalAlignment(JLabel.CENTER);

        jQuestion.setBackground(Color.getHSBColor((float) (64.62 / 360), (float) (5.31 / 100), (float) (96.08 / 100)));

        jQuestion.setOpaque(true);
    }//GEN-LAST:event_JPlaygameActionPerformed

    private void JExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_JExitActionPerformed

    private void jAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAuthorActionPerformed
        // TODO add your handling code here:
        Author_form author_form = new Author_form();
        author_form.setVisible(true);


    }//GEN-LAST:event_jAuthorActionPerformed

    private void jTop10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTop10ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Chưa cập nhật");
    }//GEN-LAST:event_jTop10ActionPerformed
    public void changeVisibleAll(boolean status) {
        jPlay.setVisible(status);
        jansA.setVisible(status);
        jansB.setVisible(status);
        jansC.setVisible(status);
        jansD.setVisible(status);
        jProgressBar1.setVisible(status);
        jScore.setVisible(status);
        jPoint.setVisible(status);

    }

    void load() {

        changeVisibleAll(true);

        String cur_image;

        Random rd = new Random();
        int index_image = rd.nextInt(8);
        cur_image = listImage.get(index_image);
        jBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_chanh/" + cur_image + ".jpg")));

        point++;
        jPoint.setText(point + "");
        if (listQues.size() == 0) {
            this.jQuestion.setText("You won!");
            this.jPlay.setEnabled(true);
            this.jPlay.setText("Replay");
            this.jansA.setEnabled(false);
            this.jansB.setEnabled(false);
            this.jansC.setEnabled(false);
            this.jansD.setEnabled(false);
            time.stop();
            jProgressBar1.setValue(0);

        } else {
            Random rand = new Random();
            int index_random = rand.nextInt(listQues.size());

            cur_ques = listQues.get(index_random);
            listQues.remove(index_random);

            List<String> shuffled_ansList = Shuffle(cur_ques);

            this.jQuestion.setText(cur_ques.getQues());
            this.jansA.setText("A. " + shuffled_ansList.get(0));
            this.jansB.setText("B. " + shuffled_ansList.get(1));
            this.jansC.setText("C. " + shuffled_ansList.get(2));
            this.jansD.setText("D. " + shuffled_ansList.get(3));

            time_run = TIME_MAX;
            time.start();
        }

    }

    public boolean check_result() {

        if (this.user_ans.equals(cur_ques.getTrueAns())) {
            new Thread() {
                @Override
                public void run() {
                    //As your stream implements Closeable, it is better to use a "try-with-resources"
                    try (InputStream fis = this.getClass().getResourceAsStream("true.mp3")) {

                        new Player(fis).play();
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            }.start();
            return true;
        } else {
            new Thread() {
                @Override
                public void run() {
                    //As your stream implements Closeable, it is better to use a "try-with-resources"
                    try (InputStream fis = this.getClass().getResourceAsStream("false.mp3")) {

                        new Player(fis).play();
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            }.start();
            return false;
        }

    }

    public class LoadTime implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            if (time_run > 0) {
                time_run--;
                jProgressBar1.setValue(time_run);
            } else {
                time.stop();
                jQuestion.setText("You lose!");
                jPlay.setEnabled(true);
                jansA.setEnabled(false);
                jansB.setEnabled(false);
                jansC.setEnabled(false);
                jansD.setEnabled(false);
                jPlay.setText("Replay");
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game_chanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game_chanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game_chanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game_chanh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Game_chanh().setVisible(true);
                } catch (JavaLayerException ex) {
                    Logger.getLogger(Game_chanh.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Game_chanh.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JExit;
    private javax.swing.JButton JPlaygame;
    private javax.swing.JMenuItem jAuthor;
    private javax.swing.JLabel jBackground;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jPlay;
    private javax.swing.JLabel jPoint;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jQuestion;
    private javax.swing.JLabel jScore;
    private javax.swing.JMenuItem jTop10;
    private javax.swing.JMenu jTopPlayer;
    private javax.swing.JButton jansA;
    private javax.swing.JButton jansB;
    private javax.swing.JButton jansC;
    private javax.swing.JButton jansD;
    // End of variables declaration//GEN-END:variables
}
